apiVersion: v1
data:
  pod-outdated-secret.yaml: "---\napiVersion: apps.projectsveltos.io/v1alpha1\nkind:
    Cleaner\nmetadata:\n  name: list-pods-with-outdated-secret-data\nspec:\n  action:
    Scan \n  schedule: \"0 * * * *\"\n  notifications:\n  - name: report\n    type:
    CleanerReport\n  resourcePolicySet:\n    resourceSelectors:\n    - kind: Pod\n
    \     group: \"\"\n      version: v1\n    - kind: Secret\n      group: \"\"\n
    \     version: v1\n    aggregatedSelection: |\n      function getKey(namespace,
    name)\n        return namespace .. \":\" .. name\n      end\n\n      --  Convert
    creationTimestamp \"2023-12-12T09:35:56Z\"\n      function convertTimestampString(timestampStr)\n
    \       local convertedTimestamp = string.gsub(\n          timestampStr,\n          '(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)Z',\n
    \         function(y, mon, d, h, mi, s)\n            return os.time({\n              year
    = tonumber(y),\n              month = tonumber(mon),\n              day = tonumber(d),\n
    \             hour = tonumber(h),\n              min = tonumber(mi),\n              sec
    = tonumber(s)\n            })\n          end\n        )\n        return convertedTimestamp\n
    \     end\n\n      function getLatestTime(times)\n        local latestTime = nil\n
    \       for _, time in ipairs(times) do\n          if latestTime == nil or os.difftime(tonumber(time),
    tonumber(latestTime)) > 0 then\n            latestTime = time\n          end\n
    \       end\n        return latestTime\n      end\n\n      function getSecretUpdateTime(secret)\n
    \       local times = {}\n        if secret.metadata.managedFields ~= nil then\n
    \         for _, mf in ipairs(secret.metadata.managedFields) do\n            if
    mf.time ~= nil then\n              table.insert(times, convertTimestampString(mf.time))\n
    \           end\n          end\n        end\n\n        return getLatestTime(times)\n
    \     end\n\n      function isPodOlderThanSecret(podTimestamp, secretTimestamp)\n
    \       timeDifference = os.difftime(tonumber(podTimestamp), tonumber(secretTimestamp))\n
    \       return  timeDifference < 0\n      end\n\n      function getPodTimestamp(pod)\n
    \       if pod.status ~= nil and pod.status.conditions ~= nil then\n          for
    _,condition in ipairs(pod.status.conditions) do\n            if condition.type
    == \"PodReadyToStartContainers\" and condition.status == \"True\" then\n              return
    convertTimestampString(condition.lastTransitionTime)\n            end\n          end\n
    \       end\n        return convertTimestampString(pod.metadata.creationTimestamp)\n
    \     end\n\n      function hasOutdatedSecret(pod, secrets)\n        podTimestamp
    = getPodTimestamp(pod)\n\n        if pod.spec.containers ~= nil then\n          for
    _, container in ipairs(pod.spec.containers) do\n\n            if container.env
    ~= nil then\n              for _, env in ipairs(container.env) do\n                if
    env.valueFrom ~= nil and env.valueFrom.secretKeyRef ~= nil then\n                  key
    = getKey(pod.metadata.namespace, env.valueFrom.secretKeyRef.name)\n                  if
    isPodOlderThanSecret(podTimestamp, secrets[key]) then\n                    return
    true, \"secret \" .. key .. \" has been updated after pod creation\"\n                  end\n
    \               end\n              end\n            end  \n\n            if  container.envFrom
    ~= nil then\n              for _, envFrom in ipairs(container.envFrom) do\n                if
    envFrom.secretRef ~= nil then\n                  key = getKey(pod.metadata.namespace,
    envFrom.secretRef.name)\n                  if isPodOlderThanSecret(podTimestamp,
    secrets[key]) then\n                    return true, \"secret \" .. key .. \"
    has been updated after pod creation\"\n                  end\n                end\n
    \             end  \n            end\n          end\n        end\n\n        if
    pod.spec.initContainers ~= nil then\n          for _, initContainer in ipairs(pod.spec.initContainers)
    do\n            if initContainer.env ~= nil then\n              for _, env in
    ipairs(initContainer.env) do\n                if env.valueFrom ~= nil and env.valueFrom.secretKeyRef
    ~= nil then\n                  key = getKey(pod.metadata.namespace, env.valueFrom.secretKeyRef.name)\n
    \                 if isPodOlderThanSecret(podTimestamp, secrets[key]) then\n                    return
    true, \"secret \" .. key .. \" has been updated after pod creation\"\n                  end\n
    \               end\n              end\n            end\n          end\n        end\n\n
    \       if pod.spec.volumes ~= nil then  \n          for _, volume in ipairs(pod.spec.volumes)
    do\n            if volume.secret ~= nil then\n              key = getKey(pod.metadata.namespace,
    volume.secret.secretName)\n              if isPodOlderThanSecret(podTimestamp,
    secrets[key]) then\n                return true, \"secret \" .. key .. \" has
    been updated after pod creation\"\n              end\n            end\n\n            if
    volume.projected ~= nil and volume.projected.sources ~= nil then\n              for
    _, projectedResource in ipairs(volume.projected.sources) do\n                if
    projectedResource.secret ~= nil then\n                  key = getKey(pod.metadata.namespace,
    projectedResource.secret.name)\n                  if isPodOlderThanSecret(podTimestamp,
    secrets[key]) then\n                    return true, \"secret \" .. key .. \"
    has been updated after pod creation\"\n                  end\n                end\n
    \             end\n            end\n          end\n        end\n\n        return
    false\n      end      \n\n      function evaluate()\n        local hs = {}\n        hs.message
    = \"\"\n\n        local pods = {}\n        local secrets = {}\n\n        -- Separate
    secrets and pods\n        for _, resource in ipairs(resources) do\n          local
    kind = resource.kind\n          if kind == \"Secret\" then\n            key =
    getKey(resource.metadata.namespace, resource.metadata.name)\n            updateTimestamp
    = getSecretUpdateTime(resource)\n            secrets[key] = updateTimestamp\n
    \         elseif kind == \"Pod\" then\n            table.insert(pods, resource)\n
    \         end\n        end\n\n        local podsWithOutdatedSecret = {}\n\n        for
    _, pod in ipairs(pods) do\n          outdatedData, message = hasOutdatedSecret(pod,
    secrets)\n          if outdatedData then\n            table.insert(podsWithOutdatedSecret,
    {resource= pod, message = message})\n          end\n        end\n\n        if
    #podsWithOutdatedSecret > 0 then\n          hs.resources = podsWithOutdatedSecret\n
    \       end\n        return hs\n      end\n"
kind: ConfigMap
metadata:
  name: pod-with-outdated-secret
  namespace: default